// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mtd.OrderMaker.Server.Entity;

namespace Mtd.OrderMaker.Server.Migrations
{
    [DbContext(typeof(OrderMakerContext))]
    [Migration("20191031133449_ApprovalImgsText")]
    partial class ApprovalImgsText
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdApproval", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<byte[]>("ImgApproved")
                        .HasColumnName("img_approved")
                        .HasColumnType("mediumblob");

                    b.Property<string>("ImgApprovedText")
                        .HasColumnName("img_approved_text")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImgApprovedType")
                        .HasColumnName("img_approved_type")
                        .HasColumnType("varchar(48)");

                    b.Property<byte[]>("ImgIteraction")
                        .HasColumnName("img_iteraction")
                        .HasColumnType("mediumblob");

                    b.Property<string>("ImgIteractionText")
                        .HasColumnName("img_iteraction_text")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImgIteractionType")
                        .HasColumnName("img_iteraction_type")
                        .HasColumnType("varchar(48)");

                    b.Property<byte[]>("ImgRejected")
                        .HasColumnName("img_rejected")
                        .HasColumnType("mediumblob");

                    b.Property<string>("ImgRejectedText")
                        .HasColumnName("img_rejected_text")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImgRejectedType")
                        .HasColumnName("img_rejected_type")
                        .HasColumnType("varchar(48)");

                    b.Property<byte[]>("ImgRequired")
                        .HasColumnName("img_required")
                        .HasColumnType("mediumblob");

                    b.Property<string>("ImgRequiredText")
                        .HasColumnName("img_required_text")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImgRequiredType")
                        .HasColumnName("img_required_type")
                        .HasColumnType("varchar(48)");

                    b.Property<byte[]>("ImgStart")
                        .HasColumnName("img_start")
                        .HasColumnType("mediumblob");

                    b.Property<string>("ImgStartText")
                        .HasColumnName("img_start_text")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImgStartType")
                        .HasColumnName("img_start_type")
                        .HasColumnType("varchar(48)");

                    b.Property<byte[]>("ImgWaiting")
                        .HasColumnName("img_waiting")
                        .HasColumnType("mediumblob");

                    b.Property<string>("ImgWaitingText")
                        .HasColumnName("img_waiting_text")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ImgWaitingType")
                        .HasColumnName("img_waiting_type")
                        .HasColumnType("varchar(48)");

                    b.Property<string>("MtdForm")
                        .IsRequired()
                        .HasColumnName("mtd_form")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdForm")
                        .HasName("fk_approvel_form_idx");

                    b.ToTable("mtd_approval");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdApprovalRejection", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'green'");

                    b.Property<byte[]>("ImgData")
                        .HasColumnName("img_data")
                        .HasColumnType("mediumblob");

                    b.Property<string>("ImgType")
                        .HasColumnName("img_type")
                        .HasColumnType("varchar(45)");

                    b.Property<int>("MtdApprovalStageId")
                        .HasColumnName("mtd_approval_stage_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnName("note")
                        .HasColumnType("varchar(512)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdApprovalStageId")
                        .HasName("fk_rejection_stage_idx");

                    b.HasIndex("Sequence")
                        .HasName("ix_sequence");

                    b.ToTable("mtd_approval_rejection");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdApprovalResolution", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'green'");

                    b.Property<byte[]>("ImgData")
                        .HasColumnName("img_data")
                        .HasColumnType("mediumblob");

                    b.Property<string>("ImgType")
                        .HasColumnName("img_type")
                        .HasColumnType("varchar(45)");

                    b.Property<int>("MtdApprovalStageId")
                        .HasColumnName("mtd_approval_stage_id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnName("note")
                        .HasColumnType("varchar(512)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdApprovalStageId")
                        .HasName("fk_resolution_stage_idx");

                    b.HasIndex("Sequence")
                        .HasName("ix_sequence");

                    b.ToTable("mtd_approval_resolution");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdApprovalStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("BlockParts")
                        .IsRequired()
                        .HasColumnName("block_parts")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("MtdApproval")
                        .IsRequired()
                        .HasColumnName("mtd_approval")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.Property<int>("Stage")
                        .HasColumnName("stage")
                        .HasColumnType("int(11)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdApproval")
                        .HasName("fk_stage_approval_idx");

                    b.HasIndex("UserId")
                        .HasName("IX_USER");

                    b.ToTable("mtd_approval_stage");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdCategoryForm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Parent")
                        .IsRequired()
                        .HasColumnName("parent")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("Parent")
                        .HasName("fk_group_themself_idx");

                    b.ToTable("mtd_category_form");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdConfigFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<byte[]>("FileData")
                        .IsRequired()
                        .HasColumnName("file_data")
                        .HasColumnType("mediumblob");

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 64)))
                        .HasColumnName("file_size")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnName("file_type")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_config_file");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdConfigParam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_config_param");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnName("idUser")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("MtdForm")
                        .IsRequired()
                        .HasColumnName("mtd_form")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Page")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("page")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PageSize")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("page_size")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'10'");

                    b.Property<string>("SearchNumber")
                        .IsRequired()
                        .HasColumnName("searchNumber")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("SearchText")
                        .IsRequired()
                        .HasColumnName("searchText")
                        .HasColumnType("varchar(256)");

                    b.Property<sbyte>("ShowDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("show_date")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("ShowNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("show_number")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("WaitList")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("waitlist")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("IdUser")
                        .HasName("IX_INDEX_USER");

                    b.HasIndex("MtdForm")
                        .HasName("mtd_filter_mtd_form_idx");

                    b.ToTable("mtd_filter");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFilterColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<int>("MtdFilter")
                        .HasColumnName("mtd_filter")
                        .HasColumnType("int(11)");

                    b.Property<string>("MtdFormPartField")
                        .IsRequired()
                        .HasColumnName("mtd_form_part_field")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFilter")
                        .HasName("mtd_filter_column_idx");

                    b.HasIndex("MtdFormPartField")
                        .HasName("mtd_roster_field_idx");

                    b.ToTable("mtd_filter_column");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFilterDate", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnName("date_end")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStart")
                        .HasColumnName("date_start")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_filter_date");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFilterField", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MtdFilter")
                        .HasColumnName("mtd_filter")
                        .HasColumnType("int(11)");

                    b.Property<string>("MtdFormPartField")
                        .IsRequired()
                        .HasColumnName("mtd_form_part_field")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("MtdTerm")
                        .HasColumnName("mtd_term")
                        .HasColumnType("int(11)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("value")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFilter")
                        .HasName("mtd_filter_idx");

                    b.HasIndex("MtdFormPartField")
                        .HasName("mtd_filter_field_mtd_form_field_idx");

                    b.HasIndex("MtdTerm")
                        .HasName("mtd_filter_field_term_idx");

                    b.ToTable("mtd_filter_field");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFilterScript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("Apply")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("apply")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<int>("MtdFilter")
                        .HasColumnName("mtd_filter")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Script")
                        .IsRequired()
                        .HasColumnName("script")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFilter")
                        .HasName("fk_script_filter_idx");

                    b.ToTable("mtd_filter_script");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdForm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("MtdCategory")
                        .IsRequired()
                        .HasColumnName("mtd_category")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.Property<string>("Parent")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("VisibleDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible_date")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("VisibleNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("visible_number")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdCategory");

                    b.HasIndex("Parent");

                    b.ToTable("mtd_form");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormDesk", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ColorBack")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color_back")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'gray'");

                    b.Property<string>("ColorFont")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("color_font")
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'white'");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("mediumblob");

                    b.Property<int>("ImageSize")
                        .HasColumnName("image_size")
                        .HasColumnType("int(11)");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnName("image_type")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_form_desk");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormHeader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("mediumblob");

                    b.Property<int>("ImageSize")
                        .HasColumnName("image_size")
                        .HasColumnType("int(11)");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnName("image_type")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_form_header");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormList", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("MtdForm")
                        .IsRequired()
                        .HasColumnName("mtd_form")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdForm")
                        .HasName("fk_list_form_idx");

                    b.ToTable("mtd_form_list");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormPart", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.Property<sbyte>("Child")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("child")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("MtdForm")
                        .IsRequired()
                        .HasColumnName("mtd_form")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("MtdSysStyle")
                        .HasColumnName("mtd_sys_style")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Title")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("title")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdForm")
                        .HasName("fk_mtd_form_part_mtd_form1_idx");

                    b.HasIndex("MtdSysStyle")
                        .HasName("fk_mtd_form_part_mtd_sys_style1_idx");

                    b.ToTable("mtd_form_part");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormPartField", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("MtdFormPart")
                        .IsRequired()
                        .HasColumnName("mtd_form_part")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("MtdSysType")
                        .HasColumnName("mtd_sys_type")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.Property<sbyte>("Required")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("required")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFormPart")
                        .HasName("fk_mtd_form_part_field_mtd_form_part1_idx");

                    b.HasIndex("MtdSysType")
                        .HasName("fk_mtd_form_part_field_mtd_sys_type1_idx");

                    b.ToTable("mtd_form_part_field");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormPartHeader", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("mediumblob");

                    b.Property<int>("ImageSize")
                        .HasColumnName("image_size")
                        .HasColumnType("int(11)");

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnName("image_type")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_form_part_header");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdGroup", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_group");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdLogApproval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("MtdStore")
                        .IsRequired()
                        .HasColumnName("mtd_store")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Rejection")
                        .HasColumnName("rejection")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Resolution")
                        .HasColumnName("resolution")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Result")
                        .HasColumnName("result")
                        .HasColumnType("int(11)");

                    b.Property<int>("Stage")
                        .HasColumnName("stage")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Timecr")
                        .HasColumnName("timecr")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdStore")
                        .HasName("fk_log_approval_store_idx");

                    b.HasIndex("Rejection")
                        .HasName("fk_log_rejection_idx");

                    b.HasIndex("Resolution")
                        .HasName("fk_log_resolution_idx");

                    b.HasIndex("Stage")
                        .HasName("fk_log_approval_stage_idx");

                    b.ToTable("mtd_log_approval");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdLogDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("MtdStore")
                        .IsRequired()
                        .HasColumnName("mtd_store")
                        .HasColumnType("varchar(36)");

                    b.Property<DateTime>("TimeCh")
                        .HasColumnName("timech")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdStore")
                        .HasName("fk_log_document_store_idx");

                    b.HasIndex("TimeCh")
                        .HasName("ix_date");

                    b.ToTable("mtd_log_document");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdPolicy", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_policy");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdPolicyForms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("ChangeDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("change_date")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ChangeOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("change_owner")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Create")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("DeleteAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_all")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("DeleteGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_group")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("DeleteOwn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("delete_own")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("EditAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edit_all")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("EditGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edit_group")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("EditOwn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edit_own")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("MtdForm")
                        .IsRequired()
                        .HasColumnName("mtd_form")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("MtdPolicy")
                        .IsRequired()
                        .HasColumnName("mtd_policy")
                        .HasColumnType("varchar(36)");

                    b.Property<sbyte>("Reviewer")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("reviewer")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ViewAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("view_all")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ViewGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("view_group")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("ViewOwn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("view_own")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdForm")
                        .HasName("fk_policy_forms_form_idx");

                    b.HasIndex("MtdPolicy")
                        .HasName("fk_policy_forms_policy_idx");

                    b.HasIndex("MtdPolicy", "MtdForm")
                        .IsUnique()
                        .HasName("UNIQUE_FORM");

                    b.ToTable("mtd_policy_forms");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdPolicyParts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("Create")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("create")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<sbyte>("Edit")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("edit")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("MtdFormPart")
                        .IsRequired()
                        .HasColumnName("mtd_form_part")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("MtdPolicy")
                        .IsRequired()
                        .HasColumnName("mtd_policy")
                        .HasColumnType("varchar(36)");

                    b.Property<sbyte>("ViewAll")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("view")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFormPart")
                        .HasName("fk_policy_part_part_idx");

                    b.HasIndex("MtdPolicy")
                        .HasName("fk_policy_part_policy_idx");

                    b.HasIndex("MtdPolicy", "MtdFormPart")
                        .IsUnique()
                        .HasName("UNIQUE_PART");

                    b.ToTable("mtd_policy_parts");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStore", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("MtdForm")
                        .IsRequired()
                        .HasColumnName("mtd_form")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Parent")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Sequence")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sequence")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateTime>("Timecr")
                        .HasColumnName("timecr")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdForm")
                        .HasName("fk_mtd_store_mtd_form1_idx");

                    b.HasIndex("Parent");

                    b.HasIndex("Timecr")
                        .HasName("IX_TIMECR");

                    b.HasIndex("MtdForm", "Sequence")
                        .IsUnique()
                        .HasName("Seq_Unique");

                    b.ToTable("mtd_store");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreApproval", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<sbyte>("Complete")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("complete")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("MtdApproveStage")
                        .HasColumnName("md_approve_stage")
                        .HasColumnType("int(11)");

                    b.Property<string>("PartsApproved")
                        .IsRequired()
                        .HasColumnName("parts_approved")
                        .HasColumnType("longtext");

                    b.Property<string>("Rejection")
                        .HasColumnName("rejection")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Resolution")
                        .HasColumnName("resolution")
                        .HasColumnType("varchar(36)");

                    b.Property<int>("Result")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("result")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("Id");

                    b.HasIndex("Complete")
                        .HasName("IX_APPROVED");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdApproveStage")
                        .HasName("fk_store_approve_stage_idx");

                    b.HasIndex("Rejection")
                        .HasName("fk_store_stage_rejection_idx");

                    b.HasIndex("Resolution")
                        .HasName("fk_store_stage_resolution_idx");

                    b.ToTable("mtd_store_approval");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreLink", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MtdStore")
                        .IsRequired()
                        .HasColumnName("mtd_store")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Register")
                        .IsRequired()
                        .HasColumnType("varchar(768)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdStore")
                        .HasName("fk_mtd_store_link_mtd_store1_idx");

                    b.HasIndex("MtdStore", "Id")
                        .IsUnique()
                        .HasName("ix_unique");

                    b.ToTable("mtd_store_link");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreOwner", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnName("id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("UserId")
                        .HasName("IX_USER");

                    b.ToTable("mtd_store_owner");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MtdFormPartField")
                        .IsRequired()
                        .HasColumnName("mtd_form_part_field")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("MtdStore")
                        .IsRequired()
                        .HasColumnName("mtd_store")
                        .HasColumnType("varchar(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("MtdFormPartField")
                        .HasName("fk_mtd_store_stack_mtd_form_part_field1_idx");

                    b.HasIndex("MtdStore")
                        .HasName("fk_mtd_store_stack_mtd_store_idx");

                    b.HasIndex("MtdStore", "MtdFormPartField")
                        .IsUnique()
                        .HasName("IX_UNIQUE");

                    b.ToTable("mtd_store_stack");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStackDate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime>("Register")
                        .HasColumnName("register")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("Register")
                        .HasName("IX_DATESTACK");

                    b.ToTable("mtd_store_stack_date");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStackDecimal", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("Register")
                        .HasColumnName("register")
                        .HasColumnType("decimal(20,2)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("Register")
                        .HasName("IX_DECIMALREGISTER");

                    b.ToTable("mtd_store_stack_decimal");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStackFile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnName("file_name")
                        .HasColumnType("varchar(256)");

                    b.Property<int>("FileSize")
                        .HasColumnName("file_size")
                        .HasColumnType("int(11)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnName("file_type")
                        .HasColumnType("varchar(256)");

                    b.Property<byte[]>("Register")
                        .IsRequired()
                        .HasColumnName("register")
                        .HasColumnType("mediumblob");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_store_stack_file");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStackInt", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Register")
                        .HasColumnName("register")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.HasIndex("Register")
                        .HasName("IX_INTSTACK");

                    b.ToTable("mtd_store_stack_int");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStackText", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Register")
                        .IsRequired()
                        .HasColumnName("register")
                        .HasColumnType("varchar(768)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("category_id_UNIQUE");

                    b.HasIndex("Register")
                        .HasName("IX_REGISTER_TEXT");

                    b.ToTable("mtd_store_stack_text");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdSysStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_sys_style");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdSysTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(45)");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasColumnName("sign")
                        .HasColumnType("varchar(45)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_sys_term");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdSysType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("active")
                        .HasColumnType("tinyint(4)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description")
                        .HasColumnType("varchar(512)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(120)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("id_UNIQUE");

                    b.ToTable("mtd_sys_type");
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdApproval", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdApproval")
                        .HasForeignKey("MtdForm")
                        .HasConstraintName("fk_approvel_form")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdApprovalRejection", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdApprovalStage", "MtdApprovalStage")
                        .WithMany("MtdApprovalRejection")
                        .HasForeignKey("MtdApprovalStageId")
                        .HasConstraintName("fk_rejection_stage")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdApprovalResolution", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdApprovalStage", "MtdApprovalStage")
                        .WithMany("MtdApprovalResolution")
                        .HasForeignKey("MtdApprovalStageId")
                        .HasConstraintName("fk_resolution_stage")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdApprovalStage", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdApproval", "MtdApprovalNavigation")
                        .WithMany("MtdApprovalStage")
                        .HasForeignKey("MtdApproval")
                        .HasConstraintName("fk_stage_approval")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFilter", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdFilter")
                        .HasForeignKey("MtdForm")
                        .HasConstraintName("mtd_filter_mtd_form")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFilterColumn", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFilter", "MtdFilterNavigation")
                        .WithMany("MtdFilterColumn")
                        .HasForeignKey("MtdFilter")
                        .HasConstraintName("mtd_filter_column_mtd_field")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFormPartField", "MtdFormPartFieldNavigation")
                        .WithMany("MtdFilterColumn")
                        .HasForeignKey("MtdFormPartField")
                        .HasConstraintName("mtd_roster_field")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFilterDate", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFilter", "IdNavigation")
                        .WithOne("MtdFilterDate")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdFilterDate", "Id")
                        .HasConstraintName("fk_date_filter")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFilterField", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFilter", "MtdFilterNavigation")
                        .WithMany("MtdFilterField")
                        .HasForeignKey("MtdFilter")
                        .HasConstraintName("mtd_filter_field_mtd_field")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFormPartField", "MtdFormPartFieldNavigation")
                        .WithMany("MtdFilterField")
                        .HasForeignKey("MtdFormPartField")
                        .HasConstraintName("mtd_filter_field_mtd_form_field")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdSysTerm", "MtdTermNavigation")
                        .WithMany("MtdFilterField")
                        .HasForeignKey("MtdTerm")
                        .HasConstraintName("mtd_filter_field_mtd_term")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFilterScript", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFilter", "MtdFilterNavigation")
                        .WithMany("MtdFilterScript")
                        .HasForeignKey("MtdFilter")
                        .HasConstraintName("fk_script_filter")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdForm", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdCategoryForm", "MtdCategoryNavigation")
                        .WithMany("MtdForm")
                        .HasForeignKey("MtdCategory")
                        .HasConstraintName("fk_form_category")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdForm", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("fk_form_parent")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormDesk", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdForm", "IdNavigation")
                        .WithOne("MtdFormDesk")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdFormDesk", "Id")
                        .HasConstraintName("fk_mtd_form_des_mtd_from")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormHeader", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdForm", "IdNavigation")
                        .WithOne("MtdFormHeader")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdFormHeader", "Id")
                        .HasConstraintName("fk_image_form")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormList", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFormPartField", "IdNavigation")
                        .WithOne("MtdFormList")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdFormList", "Id")
                        .HasConstraintName("fk_list_field")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdFormList")
                        .HasForeignKey("MtdForm")
                        .HasConstraintName("fk_list_form")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormPart", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdFormPart")
                        .HasForeignKey("MtdForm")
                        .HasConstraintName("fk_mtd_form_part_mtd_form1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdSysStyle", "MtdSysStyleNavigation")
                        .WithMany("MtdFormPart")
                        .HasForeignKey("MtdSysStyle")
                        .HasConstraintName("fk_mtd_form_part_mtd_sys_style1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormPartField", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFormPart", "MtdFormPartNavigation")
                        .WithMany("MtdFormPartField")
                        .HasForeignKey("MtdFormPart")
                        .HasConstraintName("fk_mtd_form_part_field_mtd_form_part1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdSysType", "MtdSysTypeNavigation")
                        .WithMany("MtdFormPartField")
                        .HasForeignKey("MtdSysType")
                        .HasConstraintName("fk_mtd_form_part_field_mtd_sys_type1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdFormPartHeader", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFormPart", "IdNavigation")
                        .WithOne("MtdFormPartHeader")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdFormPartHeader", "Id")
                        .HasConstraintName("fk_image_form_part")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdLogApproval", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStore", "MtdStoreNavigation")
                        .WithMany("MtdLogApproval")
                        .HasForeignKey("MtdStore")
                        .HasConstraintName("fk_log_approval_store")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdApprovalRejection", "RejectionNavigation")
                        .WithMany("MtdLogApproval")
                        .HasForeignKey("Rejection")
                        .HasConstraintName("fk_log_rejection")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdApprovalResolution", "ResolutionNavigation")
                        .WithMany("MtdLogApproval")
                        .HasForeignKey("Resolution")
                        .HasConstraintName("fk_log_resolution")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdApprovalStage", "StageNavigation")
                        .WithMany("MtdLogApproval")
                        .HasForeignKey("Stage")
                        .HasConstraintName("fk_log_approval_stage")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdLogDocument", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStore", "MtdStoreNavigation")
                        .WithMany("MtdLogDocument")
                        .HasForeignKey("MtdStore")
                        .HasConstraintName("fk_log_document_store")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdPolicyForms", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdPolicyForms")
                        .HasForeignKey("MtdForm")
                        .HasConstraintName("fk_policy_forms_form")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdPolicy", "MtdPolicyNavigation")
                        .WithMany("MtdPolicyForms")
                        .HasForeignKey("MtdPolicy")
                        .HasConstraintName("fk_policy_forms_policy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdPolicyParts", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFormPart", "MtdFormPartNavigation")
                        .WithMany("MtdPolicyParts")
                        .HasForeignKey("MtdFormPart")
                        .HasConstraintName("fk_policy_part_part")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdPolicy", "MtdPolicyNavigation")
                        .WithMany("MtdPolicyParts")
                        .HasForeignKey("MtdPolicy")
                        .HasConstraintName("fk_policy_part_policy")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStore", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdForm", "MtdFormNavigation")
                        .WithMany("MtdStore")
                        .HasForeignKey("MtdForm")
                        .HasConstraintName("fk_mtd_store_mtd_form1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStore", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("fk_mtd_store_parent")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreApproval", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStore", "IdNavigation")
                        .WithOne("MtdStoreApproval")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdStoreApproval", "Id")
                        .HasConstraintName("fk_store_approve")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdApprovalStage", "MtdApproveStageNavigation")
                        .WithMany("MtdStoreApproval")
                        .HasForeignKey("MtdApproveStage")
                        .HasConstraintName("fk_store_approve_stage")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdApprovalRejection", "RejectionNavigation")
                        .WithMany("MtdStoreApproval")
                        .HasForeignKey("Rejection")
                        .HasConstraintName("fk_store_stage_rejection")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdApprovalResolution", "ResolutionNavigation")
                        .WithMany("MtdStoreApproval")
                        .HasForeignKey("Resolution")
                        .HasConstraintName("fk_store_stage_resolution")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreLink", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreLink")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdStoreLink", "Id")
                        .HasConstraintName("fk_mtd_store_link_mtd_store_stack")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStore", "MtdStoreNavigation")
                        .WithMany("MtdStoreLink")
                        .HasForeignKey("MtdStore")
                        .HasConstraintName("fk_mtd_store_link_mtd_store1")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreOwner", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStore", "IdNavigation")
                        .WithOne("MtdStoreOwner")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdStoreOwner", "Id")
                        .HasConstraintName("fk_owner_store")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStack", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdFormPartField", "MtdFormPartFieldNavigation")
                        .WithMany("MtdStoreStack")
                        .HasForeignKey("MtdFormPartField")
                        .HasConstraintName("fk_mtd_store_stack_mtd_form_part_field1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStore", "MtdStoreNavigation")
                        .WithMany("MtdStoreStack")
                        .HasForeignKey("MtdStore")
                        .HasConstraintName("fk_mtd_store_stack_mtd_store")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStackDate", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreStackDate")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdStoreStackDate", "Id")
                        .HasConstraintName("fk_date_stack")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStackDecimal", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreStackDecimal")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdStoreStackDecimal", "Id")
                        .HasConstraintName("fk_decimal_stack")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStackFile", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreStackFile")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdStoreStackFile", "Id")
                        .HasConstraintName("fk_file_stack")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStackInt", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreStackInt")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdStoreStackInt", "Id")
                        .HasConstraintName("fk_int_stack")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Mtd.OrderMaker.Server.Entity.MtdStoreStackText", b =>
                {
                    b.HasOne("Mtd.OrderMaker.Server.Entity.MtdStoreStack", "IdNavigation")
                        .WithOne("MtdStoreStackText")
                        .HasForeignKey("Mtd.OrderMaker.Server.Entity.MtdStoreStackText", "Id")
                        .HasConstraintName("fk_text_stack")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
