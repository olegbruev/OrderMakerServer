@*
    MTD OrderMaker - http://ordermaker.org
    Copyright (c) 2019 Oleg Bruev <job4bruev@gmail.com>. All rights reserved.

    This file is part of MTD OrderMaker.
    MTD OrderMaker is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see  https://www.gnu.org/licenses/.
*@

@model Models.Index.RowsModelView
@inject Web.Services.UserHandler userHandler;

@using Mtd.OrderMaker.Web.DataHandler.Approval
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    int colSpan = Model.MtdFormPartFields.Count + 2;
    var user = await userHandler.GetUserAsync(User);
}


<div class="mtd-index-rows" style="display:flex; position:relative">
    <div class="mdc-elevation--z8" style="margin: 0 auto; left: 50%;">
        <table>
            <thead>
                <tr>
                    <th @if (!Model.ShowNumber) { <text> hidden</text>}>
                        <form mtd-data-form method="post" action="/api/index/search/number" enctype="multipart/form-data" style="width: 100%" autocomplete='off'>
                            @Html.AntiForgeryToken()
                            <input name="formId" asp-for="@Model.IdForm" type="hidden" />
                            <div class="mdc-text-field mdc-text-field--outlined">
                                <input mtd-data-input type="text" id="indexSearchNumber" name="searchNumber" class="mdc-text-field__input " autocomplete="off" asp-for="@Model.SearchNumber" />
                                <div class="mdc-notched-outline">
                                    <div class="mdc-notched-outline__leading"></div>
                                    <div class="mdc-notched-outline__notch">
                                        <label for="indexSearchNumber" class="mdc-floating-label @{if (@Model.SearchNumber.Length > 0) { <text>mdc-floating-label--float-above</text>} }">@Localizer["ID Number"]</label>
                                    </div>
                                    <div class="mdc-notched-outline__trailing"></div>
                                </div>
                            </div>
                        </form>
                    </th>
                    <th @if (!Model.ShowDate) { <text> hidden</text>}>
                        @Localizer["Date of creation"]
                    </th>

                    @if (Model.MtdApproval != null)
                    {
                        <th>
                            <div style="text-align: center">
                                <i class="material-icons" aria-hidden="true" style="vertical-align:middle">timeline</i>
                            </div>
                        </th>
                    }


                    @foreach (var item in Model.MtdFormPartFields)
                    {
                        <th>
                            <span>@item.Name</span>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var store in Model.MtdStores)
                {
                    <tr mtd-data-href="/workplace/store/details?id=@store.Id">

                        <td @if (!Model.ShowNumber) { <text> hidden</text>}>
                            <div style="align-self: center">
                                @store.Sequence.ToString("D9")
                            </div>
                        </td>
                        <td @if (!Model.ShowDate) { <text> hidden</text>}>
                            <span>@store.Timecr.ToShortDateString()</span>
                        </td>
                        @if (Model.MtdApproval != null)
                        {
                            <td>
                                <div style="display:flex; align-content:center;">
                                    @{
                                        ApprovalStatus status = Model.ApprovalStores.Where(x => x.StoreId == store.Id).Select(x => x.Status).FirstOrDefault();
                                    }
                                    @switch (status)
                                    {
                                        case ApprovalStatus.Approved:
                                            {
                                                if (Model.MtdApproval.ImgApproved == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: green;">thumb_up</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new { maxHeight = 32, maxWidth = 32, imgArray = Model.MtdApproval.ImgApproved })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Iteraction:
                                            {
                                                if (Model.MtdApproval.ImgIteraction == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: darkred">new_releases</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new { maxHeight = 32, maxWidth = 32, imgArray = Model.MtdApproval.ImgIteraction })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Rejected:
                                            {
                                                if (Model.MtdApproval.ImgRejected == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle">thumb_down</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new { maxHeight = 32, maxWidth = 32, imgArray = Model.MtdApproval.ImgRejected })
                                                }
                                                break;
                                            }
                                        case ApprovalStatus.Required:
                                            {
                                                if (Model.MtdApproval.ImgRequired == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: red">assignment_turned_in</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new { maxHeight = 32, maxWidth = 32, imgArray = Model.MtdApproval.ImgRequired })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Start:
                                            {
                                                if (Model.MtdApproval.ImgStart == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: gray">new_releases</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new { maxHeight = 32, maxWidth = 32, imgArray = Model.MtdApproval.ImgStart })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Waiting:
                                            {
                                                <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: gray">hourglass_full</i>
                                                break;
                                            }
                                    }

                                </div>
                            </td>
                        }


                        @foreach (var field in Model.MtdFormPartFields)
                        {
                            <td>
                                <div style="padding: 2px;">
                                    @await Component.InvokeAsync("IndexCell", new { stack = Model.MtdStoreStack, idStore = store.Id, idField = field.Id, idType = field.MtdSysType })
                                </div>
                            </td>
                        }

                    </tr>
                }
            </tbody>
        </table>
        @if (Model.MtdStores.Count == 0 && Model.WaitList)
        {
            <div style="font-weight: bold; text-align: center; color: gray">
                <p>@Localizer["There are no documents requiring approval."]</p>
            </div>
        }
    </div>
</div>
@await Component.InvokeAsync("IndexFooter", new { idForm = Model.IdForm, pageCount = Model.PageCount })
