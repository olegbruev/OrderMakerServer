@*
    MTD OrderMaker - http://ordermaker.org
    Copyright (c) 2019 Oleg Bruev <job4bruev@gmail.com>. All rights reserved.

    This file is part of MTD OrderMaker.
    MTD OrderMaker is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see  https://www.gnu.org/licenses/.
*@

@model Models.Index.RowsModelView
@inject Server.Services.UserHandler userHandler;

@using Mtd.OrderMaker.Server.EntityHandler.Approval
@using Microsoft.AspNetCore.Mvc.Localization
@inject IHtmlLocalizer<SharedResource> Localizer

@{
    int colSpan = Model.MtdFormPartFields.Count + 2;
    var user = await userHandler.GetUserAsync(User);   
}

<input id="nav-store-ids" type="hidden" value="@Model.StoreIds" />

<div class="mtd-desk">
    <div class="mtd-desk-panel">

        @if (Model.IsCreator)
        {
            <div id="indexCreator" class="mtd-index-header-creator">
                <button id="index-create-button" mtd-data-href="/workplace/store/create?formId=@Model.FormId" class="mdc-fab mdc-fab--extended">
                    <div class="mdc-fab__ripple"></div>
                    <span class="material-icons mdc-fab__icon">add</span>
                    <span class="mdc-fab__label">@Localizer["Create"]</span>
                </button>
                <button id="index-create-button-mini" mtd-data-href="/workplace/store/create?formId=@Model.FormId" class="mdc-fab">
                    <div class="mdc-fab__ripple"></div>
                    <span class="material-icons mdc-fab__icon">add</span>
                </button>
            </div>
        }

        <div style="flex-grow: 1; padding-top: 38px;">
            @await Html.PartialAsync("./_buttons.cshtml")
        </div>

    </div>

    @if (!Model.WaitList)
    {
        <div class="mtd-index-header" style="display: flex; position:relative">
            <div class="mtd-index-header-search">
                <form mtd-data-form method="post" action="/api/index/search/text" enctype="multipart/form-data" autocomplete='off'>
                    @Html.AntiForgeryToken()
                    <input asp-for="@Model.FormId" name="indexForm" value="@Model.FormId" id="indexForm" hidden />
                    @await Html.PartialAsync("./_inputSearch.cshtml")
                </form>
            </div>
        </div>
    }
    else { 
        <div style="padding-bottom: 48px"></div>
    }

    @await Component.InvokeAsync("IndexFilterDisplay", new { formId = Model.FormId })
    @await Component.InvokeAsync("IndexFilterSelector", new { formId = Model.FormId })
    @await Component.InvokeAsync("IndexFilterColumns", new { formId = Model.FormId })

</div>

<div class="mtd-index-rows">
    <div style="margin: 0 auto; left: 50%;">
        <table>
            <thead>
                <tr>
                    <th @if (!Model.ShowNumber) { <text> hidden</text>}>
                        @if (!Model.WaitList)
                        {
                            <form mtd-data-form method="post" action="/api/index/search/number" enctype="multipart/form-data" style="width: 100%" autocomplete='off'>
                                @Html.AntiForgeryToken()
                                <input name="formId" asp-for="@Model.FormId" type="hidden" />
                                @await Html.PartialAsync("./_numberSearch.cshtml")
                            </form>
                        }
                    </th>

                    <th @if (!Model.ShowDate) { <text> hidden</text>}>
                        @Localizer["Date of creation"]
                    </th>

                    @if (Model.MtdApproval != null)
                    {
                        <th>
                            <div style="text-align: center">
                                <i class="material-icons" aria-hidden="true" style="vertical-align:middle">timeline</i>
                            </div>
                        </th>
                    }


                    @foreach (var item in Model.MtdFormPartFields)
                    {
                        <th>
                            <span>@item.Name</span>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var store in Model.MtdStores)
                {
                    <tr mtd-data-href="/workplace/store/details?id=@store.Id">

                        <td @if (!Model.ShowNumber) { <text> hidden</text>}>
                            <div style="align-self: center">
                                @store.Sequence.ToString("D9")
                            </div>
                        </td>
                        <td @if (!Model.ShowDate) { <text> hidden</text>}>
                            <span>@store.Timecr.ToShortDateString()</span>
                        </td>
                        @if (Model.MtdApproval != null)
                        {
                            <td>
                                <div style="display:flex; align-content:center;">
                                    @{
                                        ApprovalStatus status = Model.ApprovalStores.Where(x => x.StoreId == store.Id).Select(x => x.Status).FirstOrDefault();
                                    }
                                    @switch (status)
                                    {
                                        case ApprovalStatus.Approved:
                                            {
                                                if (Model.MtdApproval.ImgApproved == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: green;">thumb_up</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                                                    {
                                                        maxHeight = 24,
                                                        maxWidth = 24,
                                                        imgArray = Model.MtdApproval.ImgApproved,
                                                        imgType = Model.MtdApproval.ImgApprovedType
                                                    })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Iteraction:
                                            {
                                                if (Model.MtdApproval.ImgIteraction == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: darkred">new_releases</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                                                    {
                                                        maxHeight = 24,
                                                        maxWidth = 24,
                                                        imgArray = Model.MtdApproval.ImgIteraction,
                                                        imgType = Model.MtdApproval.ImgIteractionType
                                                    })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Rejected:
                                            {
                                                if (Model.MtdApproval.ImgRejected == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle">thumb_down</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                                                    {
                                                   maxHeight = 24,
                                                        maxWidth = 24,
                                                        imgArray = Model.MtdApproval.ImgRejected,
                                                        imgType = Model.MtdApproval.ImgRejectedType
                                                    })
                                                }
                                                break;
                                            }
                                        case ApprovalStatus.Required:
                                            {
                                                if (Model.MtdApproval.ImgRequired == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: red; font-size: 28px">notification_important</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                                                    {
                                                        maxHeight = 24,
                                                        maxWidth = 24,
                                                        imgArray = Model.MtdApproval.ImgRequired,
                                                        imgType = Model.MtdApproval.ImgRequiredType
                                                    })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Start:
                                            {
                                                if (Model.MtdApproval.ImgStart == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: gray">new_releases</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                                                    {
                                                       maxHeight = 24,
                                                        maxWidth = 24,
                                                        imgArray = Model.MtdApproval.ImgStart,
                                                        imgType = Model.MtdApproval.ImgStartType
                                                    })
                                                }

                                                break;
                                            }
                                        case ApprovalStatus.Waiting:
                                            {
                                                if (Model.MtdApproval.ImgWaiting == null)
                                                {
                                                    <i class="material-icons" aria-hidden="true" style="vertical-align:middle; color: gray">hourglass_full</i>
                                                }
                                                else
                                                {
                                                    @await Component.InvokeAsync("MTDImgViewer", new
                                                        {
                                                           maxHeight = 24,
                                                            maxWidth = 24,
                                                            imgArray = Model.MtdApproval.ImgWaiting,
                                                            imgType = Model.MtdApproval.ImgWaitingType
                                                        })
                                                }

                                                break;
                                            }
                                    }

                                </div>
                            </td>
                        }


                        @foreach (var field in Model.MtdFormPartFields)
                        {
                            <td>
                                <div style="padding: 2px;">
                                    @await Component.InvokeAsync("IndexCell", new { stack = Model.MtdStoreStack, idStore = store.Id, idField = field.Id, idType = field.MtdSysType })
                                </div>
                            </td>
                        }

                    </tr>
                }
            </tbody>
        </table>


        @if (Model.MtdStores.Count == 0 && Model.WaitList)
        {
            <div style="font-weight: bold; text-align: center; color: gray">
                <p>@Localizer["There are no documents requiring approval."]</p>
            </div>
        }

    </div>
</div>

@if (Model.MtdStores.Count >= Model.PageSize || Model.PageCurrent>1)
{
    @await Component.InvokeAsync("IndexFooter", new { formId = Model.FormId, pageCount = Model.PageCount })
}
